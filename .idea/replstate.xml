<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1430399962606">{:repl-history {:ide [], :local [&quot;(Math/pow 2 3)&quot; &quot;(range 5)&quot; &quot;(range 1 5)&quot; &quot;(ns eco-sim.ricardo-price-model)\n\n(defn mach-cost\n  [input t]\n  (Math/pow input t))\n\n(defn mach-costs\n  [value term]\n  (let [terms (range 1 term)\n        input (/ value (- term 1))]\n    (-&gt; terms\n        (map (partial mach-cost input))\n        (reduce +))))\n\n(defn invest [labor machinery term]\n  (fn [r w]\n    (let [labor-cost (* labor w)\n          mach-cost (mach-cost machinery term)\n          profit-cost (* r (+ labor-cost mach-cost))]\n      (+ labor-cost mach-cost profit-cost))))&quot; &quot;(ns eco-sim.ricardo-price-model)\n\n(defn mach-cost\n  [input t]\n  (Math/pow input t))\n\n(defn mach-costs\n  [value term]\n  (let [terms (range 1 term)\n        input (/ value (- term 1))]\n    (-&gt; terms\n        (map (partial mach-cost input))\n        (reduce +))))\n\n(defn invest [labor machinery term]\n  (fn [r w]\n    (let [labor-cost (* labor w)\n          mach-cost (mach-cost (* machinery w) term)\n          profit-cost (* r (+ labor-cost mach-cost))]\n      (+ labor-cost mach-cost profit-cost))))\n\n&quot; &quot;(+ (* 50 1.5) (* 50 1.5))&quot; &quot;(+ (* 50 1.5) (* 50 1.5 1.5))&quot; &quot;(mach-cost 50 1)&quot; &quot;(defn mach-costs\n  [value term r]\n  (let [terms (range 1 term)\n        input (/ value (- term 1))]\n    (-&gt; terms\n        (map (partial mach-cost input r))\n        (reduce +))))&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [labor-cost (* labor w)\n          mach-cost (mach-cost (* machinery w) r term)\n          profit-cost (* r (+ labor-cost mach-cost))]\n      (+ labor-cost mach-cost profit-cost))))&quot; &quot;(in-ns 'eco-sim.ricardo-price-model)&quot; &quot;(mach-cost 50 0.5 1)&quot; &quot;(mach-cost 50 0.5 2)&quot; &quot;(mach-costs 100 2 0.5)&quot; &quot;(range 1 3)&quot; &quot;(/ 100 (- 3 1))&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [labor-cost (* labor w)\n          mach-cost (mach-costs (* machinery w) r term)\n          profit-cost (* r (+ labor-cost mach-cost))]\n      (+ labor-cost mach-cost profit-cost))))&quot; &quot;(match-costs 100 3 0.5)&quot; &quot;(mach-costs 100 3 0.5)&quot; &quot;(ns eco-sim.ricardo-price-model)&quot; &quot;(defn mach-cost\n  [input r t]\n  (* (Math/pow (+ 1 r) t)\n     input))&quot; &quot;(defn mach-costs\n  [value term r]\n  (let [terms (range 1 term)\n        input (/ value (- term 1))]\n    (-&gt;&gt; terms\n         (map (partial mach-cost input r))\n         (reduce +))))&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [lc (* labor w)\n          mc (mach-costs (* machinery w) r term)\n          pc (* r (+ labor-cost mach-cost))]\n      (+ lc mc pc))))&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [lc (* labor w)\n          mc (mach-costs (* machinery w) r term)\n          pc (* r (+ lc mc))]\n      (+ lc mc pc))))&quot; &quot;(mach-cost 300 5 0.5)&quot; &quot;(mach-costs 300 5 0.5)&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [lc (* labor w)\n          mc (mach-costs (* machinery w) r term)\n          pc (* r (+ lc mc))]\n      mc)))&quot; &quot;(defn invest [labor machinery term]\n  (fn [r w]\n    (let [lc (* labor w)\n          mc (mach-costs (* machinery w) term r)\n          pc (* r (+ lc mc))]\n      (+ lc mc pc))))&quot; &quot;((invest 100 300 5) 0.5 1)&quot; &quot;((invest 300 100 3) 0.5 1)&quot; &quot;((invest 100 300 5) 0.1 2)&quot; &quot;((invest 300 100 3) 0.1 2)&quot;], :remote []}}</component>
</project>